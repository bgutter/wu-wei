#+TITLE: Wu-Wei

Wu-Wei is a personal productivity platform for the code-fluent.

While Wu-Wei aims to support every workflow, it does not do so by
actually implementing every workflow. Rather, out of the box, Wu-Wei
provides only a basic set of tightly-integrated productivity
tools. You'll find a task manager, personal wiki, epub reader,
calendar, email client, and other basic features.

What sets Wu-Wei apart from other productivity solutions is not its
out-of-box feature set, but rather, it's extensibility. Modeled after
Emacs and org-mode, _Wu-Wei's end-user configuration is done entirely
in code_. Rather than a comprehensive application, Wu-Wei is actually
designed to be a platform upon which you can implement your own,
personal, workflow.

* How It Works

Wu-Wei runs as a daemon, either locally or on a dedicated server. The
Wu-Wei user interface is accessed through a browser. _All Wu-Wei
frontend code is stored within the Wu-Wei server as mutable data_,
alongside other user data, such as wiki pages and calendar events.

Whenever you want to augment or modify Wu-Wei's behavior, you just
edit the front-end code directly within Wu-Wei's included code
editor. Normally, though, you won't actually need to edit the code
itself. Wu-Wei is architected with end-user behavior modifications in
mind, and most key behaviors are implemented through callback
functions. You can override these with your own implementations in
=init.js=.

** The Wu-Wei Environment

In addition customized frontend code and non-executable data, the
Wu-Wei server also stores the state of the frontend during use. Things
like window positions and sizes, scroll points within windows, and so
on. This is the Wu-Wei session.

Session data is available in well-defined way to all code within the
Wu-Wei frontend. Session data, frontend source code, and other
user data collectively form the =Wu-Wei Environment=.

** The Wu-Wei Server

Wu-Wei Server (WWS) exists primarily to serve the Wu-Wei Environment
in a secure and efficient way. Once authenticated, environment objects
are fetched from the server as-needed, and pushed back to the server
when changes are made.

Additionally, WWS takes care of various performance or
uptime-sensitive responsibilities. It provides an abstracted interface
for configuring calDAV, IMAP, OCR, and so on.

* Out-of-Box Features

Wu-Wei provides APIs within the frontend for querying tasks, notes,
calendar events, emails, and other protocol-defined data types within
the environment. While you can use these APIs to implement your own
graphical interfaces to the data within the environment, Wu-Wei also
comes with its own graphical interfaces. They are as customizable as
the base APIs themselves.

** Tasking via Doable

The Doable package uses Wu-Wei's task management data types and APIs
to provide a powerful to-do list with custom statuses and scheduling
facilities.

Wu-Wei Tasks can have...
- Custom Statuses
- Cross-Task Dependencies
- Due Dates
- Time Estimates
- Dependency tree viewer with critical path analysis
- Gantt chart
- Kanban

** Note Taking and Document Capture - ?

- Full HTML or Markdown markup
- Embedded code snippets
- EPUB ingest, highlighting and annotation
  - Stylus support on iPad
- PDF ingest and OCR
  - Camera-scanning on mobile
- Mind-Mapping
- Linking to and from Tasks, calendar events, emails, etc

** Calendar - ?



** Email - ?

- Hooks and automatic sorting rules for when an email is received

* Global Features & Technical Features

** Indexed Full-Text Search

All text data within the environment is indexed and real-time
searchable. This includes, ebook content, notes, emails, and so on.

** Session Management

Wu-Wei can store a number of sessions. Sessions can be saved via
snapshot, forked and restored.

** Plain Text Data

The entire Wu-Wei environment can be exported to plain text, and
downloaded as a large JSON archive. This can then be uploaded to a new
WWS, and everything should "just work". Sessions can be resumed, and
so on.

** Protocols

All Wu-Wei data types are defined via protocol. Any object that has a
"due-timestamp" property is considered to implement the "has-due-date"
protocol, for example, and can be shown in the calendar app as such.

Further, a "Task" object is just an object that has a "task-status"
property and a "headline" property. And so on. What this means is that
objects within a Wu-Wei environment do not have specific types, and,
can implement any number of overlapping protocols.

APIs within Doable do not accept or return objects of specific
classes, but rather, are defined in terms of protocol
definitions. When you query for a particular protocol, Wu-Wei returns
all objects in the environment which implement that protocol.

Of course, you can define your own protocols.

Efficiently indexing objects based on whether the correctly implement
any and all installed protocols is a core responsibility of Wu-Wei
Server.

** User Interface

On desktop, the default user interface has windows, and is keyboard
friendly.

On mobile or on tablets, the user-interface is swipe based. Windows
switch much like an Android or iOS app switcher.

While it is a priority that mobile and desktop support similar feature
sets, it is not a priority that they do so in visually similar ways.
